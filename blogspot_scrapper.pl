#!/usr/bin/perl#section below  for testing #print "Content-type: text/html\n\n";#print "RESULTS<br/>\n" . localtime() . "<br/>\n\n";use DBI;use Data::Dumper;#use utf8;use Encode::Encoder;#database variables$database = "DATABASENAME";$hostname = "localhost";$username = "USERNAME";$password = "PASSWORD";#creates send me an email functionsub sendEmail(){  #send me an email to let me know something is wrong	$from="Spivey\ Hall\ Blog\ Scrapper <webmaster\@spiveyhall.org>";	$to="abaker\@u1design.com";	$subject=$_[0];	$sendmailpath="/usr/sbin/sendmail";	open (SENDMAIL, "| $sendmailpath -t");	print SENDMAIL "Subject: $subject\n";	print SENDMAIL "From: $from\n";	print SENDMAIL "To: $to\n\n";	#prints passed argument message for email body	print SENDMAIL $_[0];		#if XML sucessfully parsed	# adds parsed info to email body	if(defined($_[1]))	{	 print SENDMAIL "\n\n" . $_[1];  }	close (SENDMAIL);}# url to sam's blog$url = "http://spiveyhall.blogspot.com/feeds/posts/default";# command to open URL with LYNX and dump info$command = "/usr/local/bin/lynx -source \"$url\"";# oepn a pipe to lynx and dump text into SAMSBLOG file handleopen (SAMSBLOG, "$command |");#for testing creates XML fileopen XMLFILE, ">../htdocs/xmlfile.html";#add line breaks between >< characterswhile ($line = <SAMSBLOG>) {        # was putting \n in >< parts of html tags        #finally not necessayr        # could be useful later   	    $line =~ s/></>\n</gc;      	$toCheck .= $line;}#close filehandleclose (SAMSBLOG);#finds first item in xml#uses non-greedy  quantifier for any characters between <entry> and </entry>if( $toCheck =~ m/<entry(.*?)>(.*?)<\/entry>/gcs ){	#put after while statement below	# copies loaded line into new file		#assigns first item match to title and description variables for treatment	$title = $2;	$description = $2;		#gets title of article	#greedy quantfier	if($title =~ /<title(.*?)>(.*)<\/title>/gc)	{		$title = $2;	}		#gets entire description of article	if($description =~ /<content(.*?)>(.*)<\/content>/gc)	{		#copies match to subsearch for cleaning		$summary = $2;		#replaces &lt; with < symbol		$summary =~ s/&lt;/</g;		#replaces &lt; with < symbol		$summary =~ s/&gt;/>/g;		#add line break after > symbol		$summary =~ s/>/>\n/g	}		#copies subsearch not description	$description = $summary;	#removes div and span tags from description	$description =~ s/(<(\/)?(div|span)(.*)?>)*//gc;			#removes div, span, break, strong, and em tags	$summary =~ s/(<(\/)?(div|span|a|img|strong|em|br\s?\/)(.*)?>)*//gc;	#old version $summary =~ s/(<(\/)?(div|span|br\s?\/|strong|em)(.*)?>)*//gc;	#replaces line breaks	$summary =~ s/\n//g;	#reduces paragraph to 150 characters	$summary = substr($summary,0,228); 		#cuts off last word, could be incomplete	$summary =~ s/([,-]?(\s|\b)?[^\b\s]*$)//;	}#replace quote with escaped quote$title =~ s/["]/\\"/g;#replace left UTF-8 smart quote with escaped quot$title =~ s/\xE2\x80\x9C/\\"/g;#replace right UTF-8 smart quote with escaped quot$title =~ s/\xE2\x80\x9D/\\"/g;#replace right UTF-8 single quote with escaped quot$title =~ s/\xE2\x80\x99/\\'/g;#replace left UTF-8 single quote with escaped quot$title =~ s/\xE2\x80\x98/\\'/g;#replace quote with escaped quote$summary =~ s/["]/\\"/g;#replace ampersand html entity with escaped quote$summary =~ s/&amp;nbsp;/ /g;#replace left UTF-8 smart quote with escaped quot$summary =~ s/\xE2\x80\x9C/\\"/g;#replace right UTF-8 smart quote with escaped quot$summary =~ s/\xE2\x80\x9D/\\"/g;#replace right UTF-8 single quote with escaped quot$summary =~ s/\xE2\x80\x99/\\'/g;#replace left UTF-8 single quote with escaped quot$summary =~ s/\xE2\x80\x98/\\'/g;#replace quote with escaped quote$description =~ s/["]/\\"/g;#replace left UTF-8 smart quote with escaped quot$description =~ s/\xE2\x80\x9C/\\"/g;#replace right UTF-8 smart quote with escaped quot$description =~ s/\xE2\x80\x9D/\\"/g;#replace right UTF-8 single quote with escaped quot$description =~ s/\xE2\x80\x99/\\'/g;#replace left UTF-8 single quote with escaped quot$description =~ s/\xE2\x80\x98/\\'/g;#for command prompt testingprint "Title:<br/>" . $title . "<br/>\n";print "Summary:<br/>" . $summary . "<br/>\n";#print "Description:<br/>" . $description . "<br/>\n";print XMLFILE $title . "<br/>\n";print XMLFILE $description;close (XMLFILE);#insert records into database ---------------------------------------------------------------# if title, summary and description parsed from xmlif(defined($title) && defined($summary) && defined($description) ){	#formulate databse entry statement and connect	$dsn = "DBI:mysql:database=$database;host=$hostname;";	#connect to db	$dbh = DBI->connect($dsn, $username, $password, {RaiseError=>1}) or die("Could not connect!");	#mysql statement	#check to see if sam's blog is in DB	$sql = "SELECT * from spotlight where type regexp 'blog'";	$sth = $dbh->prepare($sql);	$sth->execute;	#if it exists record is modified	if($sth->rows==1){		#mysql statement		$sql = "UPDATE concerts.spotlight set title=\"" . $title . "\", summary=\"" . $summary . "\", display=\"no\" " . "WHERE type regexp 'blog'";	}	else{		#record is inserted		$sql = "INSERT INTO concerts.spotlight (ID,title,summary,hyperlink,display,type) VALUES(\"\",\"$title\",\"$summary\",null,\"no\",\"blog\")";	}	print "\n\n" . $sql . "\n\n";		$sth = $dbh->prepare($sql); 	$sth->execute;  	#if update Db error display error	if($sth->errstr)	{		print "\n\n" . $sth->errstr . "\n\n";		&sendEmail("Error entering Blog info into DB");	}	#finish statement	$sth->finish();	#disconnects DB	$dbh->disconnect();		# send me an email for testing.	$emailBody = $description;	&sendEmail("Sam\'s Blog was parsed correctly and the entry was entered into DB",$emailBody);	}else{  # send me and email if nothing parsed	print "\nNothing Parsed\nSending Email Advertisement\n";	&sendEmail("Nothing was parsed in Sam\'s Blog.");}